import{_ as a,c as i,a5 as t,o as n}from"./chunks/framework.DoP1wijR.js";const o=JSON.parse('{"title":"04-标识符和关键字","description":"","frontmatter":{},"headers":[],"relativePath":"仓颉入门到实战/04-标识符和关键字/04-标识符和关键字.md","filePath":"仓颉入门到实战/04-标识符和关键字/04-标识符和关键字.md","lastUpdated":1734827919000}'),e={name:"仓颉入门到实战/04-标识符和关键字/04-标识符和关键字.md"};function l(p,s,r,d,h,k){return n(),i("div",null,s[0]||(s[0]=[t(`<h1 id="_04-标识符和关键字" tabindex="-1">04-标识符和关键字 <a class="header-anchor" href="#_04-标识符和关键字" aria-label="Permalink to &quot;04-标识符和关键字&quot;">​</a></h1><p>在仓颉语言中，我们用到自定义的变量、函数、类等元素的名称，都必须用到<strong>标识符</strong>。我们可以也将刚才的变量、函数、类等看成是我们</p><p>可以在仓颉的这个世界中，自己给一些小朋友的名称。既然是要起名字，那么就有一些范围和一些限制。举个例子：我们不会给一个小孩</p><p>起这样的名字：<strong>卖75块钱眉笔的那个人</strong>。这样的名称<strong>不合法也不合理</strong></p><h2 id="标识符分类两类" tabindex="-1">标识符分类两类 <a class="header-anchor" href="#标识符分类两类" aria-label="Permalink to &quot;标识符分类两类&quot;">​</a></h2><ol><li>普通标识符</li><li>原始标识符</li></ol><h2 id="普通标识符" tabindex="-1">普通标识符 <a class="header-anchor" href="#普通标识符" aria-label="Permalink to &quot;普通标识符&quot;">​</a></h2><p>普通标识符的命名规则有如下两种</p><ol><li>两个组成部分【AB】，【A】部分表示英文字母开头，【B】可以是英文字母、数字、和下划线</li><li>三个组成部分【ABC】，【A】部分是一个或者多个下划线，【B】部分是英文字母，【C】部分可以是英文、数字、和下划线</li></ol><h3 id="正例" tabindex="-1">正例 <a class="header-anchor" href="#正例" aria-label="Permalink to &quot;正例&quot;">​</a></h3><div class="language-c++ vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">package project1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 标记当前项目的名称</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    let abc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;小万1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    let abc123 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;小万&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    let _abc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;小万&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    let __ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;小万&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 两个下划线</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    let _abc123 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;小万&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="反例" tabindex="-1">反例 <a class="header-anchor" href="#反例" aria-label="Permalink to &quot;反例&quot;">​</a></h3><div class="language-c++ vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    let </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;小万&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    let </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;小万&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    let )</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;小万&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    let </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;小万&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    let _</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;小万&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1个下划线  可以声明，但是在打印它时，会提示错误</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="原始标识符" tabindex="-1">原始标识符 <a class="header-anchor" href="#原始标识符" aria-label="Permalink to &quot;原始标识符&quot;">​</a></h2><p>原始标识符在实际开发中有的场景不多，主要用在仓颉关键字作为标识符的场景。</p><p>可以理解为是让你可以定义一些特殊或者奇葩的名字。</p><p><strong>原始标识符</strong>是在<strong>普通标识符</strong>或<strong>仓颉关键字</strong>的外面加上一对反引号</p><p>如</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>\`abc\`</span></span>
<span class="line"><span>\`if\`</span></span>
<span class="line"><span>\`else\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="正例-1" tabindex="-1">正例 <a class="header-anchor" href="#正例-1" aria-label="Permalink to &quot;正例&quot;">​</a></h3><div class="language-c++ vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">package project1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 标记当前项目的名称</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结构体 if 作为奇葩的名字</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \`if\` {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    let name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;小万&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    let </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: \`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\` </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a.name)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="关键字" tabindex="-1">关键字 <a class="header-anchor" href="#关键字" aria-label="Permalink to &quot;关键字&quot;">​</a></h2><p>在仓颉语言中，它把一些名字作为的了仓颉的关键字或者保留字，意思是有特殊的用意，不能给我们开发者当成普通的标识符来使用。</p><p>如 <strong>let</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>let let = &quot;小万&quot; // 此时  let 就是错误的使用方式 因为let 是关键字</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="关键字一览" tabindex="-1">关键字一览 <a class="header-anchor" href="#关键字一览" aria-label="Permalink to &quot;关键字一览&quot;">​</a></h3><table tabindex="0"><thead><tr><th>关键字</th><th>关键字</th><th>关键字</th></tr></thead><tbody><tr><td>as</td><td>abstract</td><td>break</td></tr><tr><td>Bool</td><td>case</td><td>catch</td></tr><tr><td>class</td><td>const</td><td>continue</td></tr><tr><td>Rune</td><td>do</td><td>else</td></tr><tr><td>enum</td><td>extend</td><td>for</td></tr><tr><td>func</td><td>false</td><td>finally</td></tr><tr><td>foreign</td><td>Float16</td><td>Float32</td></tr><tr><td>Float64</td><td>if</td><td>in</td></tr><tr><td>is</td><td>init</td><td>import</td></tr><tr><td>interface</td><td>Int8</td><td>Int16</td></tr><tr><td>Int32</td><td>Int64</td><td>IntNative</td></tr><tr><td>let</td><td>mut</td><td>main</td></tr><tr><td>macro</td><td>match</td><td>Nothing</td></tr><tr><td>open</td><td>operator</td><td>override</td></tr><tr><td>prop</td><td>public</td><td>package</td></tr><tr><td>private</td><td>protected</td><td>quote</td></tr><tr><td>redef</td><td>return</td><td>spawn</td></tr><tr><td>super</td><td>static</td><td>struct</td></tr><tr><td>synchronized</td><td>try</td><td>this</td></tr><tr><td>true</td><td>type</td><td>throw</td></tr><tr><td>This</td><td>unsafe</td><td>Unit</td></tr><tr><td>UInt8</td><td>UInt16</td><td>UInt32</td></tr><tr><td>UInt64</td><td>UIntNative</td><td>var</td></tr><tr><td>VArray</td><td>where</td><td>while</td></tr></tbody></table><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>标识符的作用就是在告诉我们 怎么起名字是合理，大家按照正常起名字的意思来对待即可。</p>`,29)]))}const u=a(e,[["render",l]]);export{o as __pageData,u as default};
