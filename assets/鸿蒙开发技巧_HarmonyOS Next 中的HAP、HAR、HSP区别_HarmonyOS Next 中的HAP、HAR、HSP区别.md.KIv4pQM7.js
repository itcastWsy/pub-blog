import{_ as a,c as r,a5 as l,o as n}from"./chunks/framework.DoP1wijR.js";const e="/pub-blog/assets/image-20240611003828646.CNWmRb07.png",o="/pub-blog/assets/image-20240611005023185.D0_mv0B7.png",i="/pub-blog/assets/image-20240611005153158.iF5hJsLp.png",s="/pub-blog/assets/image-20240611005549659.CTopR-hd.png",p="/pub-blog/assets/image-20240611005803048.gFOTHoxS.png",h="/pub-blog/assets/image-20240611010331537.CX9MPF05.png",d="/pub-blog/assets/image-20240611010945083.B6l5fTE7.png",g="/pub-blog/assets/image-20240611011515482.B6eJj2ER.png",m="/pub-blog/assets/image-20240611072802185.CmfUpUDv.png",u=JSON.parse('{"title":"HarmonyOS Next 中的HAP、HAR、HSP区别","description":"","frontmatter":{},"headers":[],"relativePath":"鸿蒙开发技巧/HarmonyOS Next 中的HAP、HAR、HSP区别/HarmonyOS Next 中的HAP、HAR、HSP区别.md","filePath":"鸿蒙开发技巧/HarmonyOS Next 中的HAP、HAR、HSP区别/HarmonyOS Next 中的HAP、HAR、HSP区别.md","lastUpdated":1735725812000}'),c={name:"鸿蒙开发技巧/HarmonyOS Next 中的HAP、HAR、HSP区别/HarmonyOS Next 中的HAP、HAR、HSP区别.md"};function H(y,t,f,P,b,A){return n(),r("div",null,t[0]||(t[0]=[l('<h1 id="harmonyos-next-中的hap、har、hsp区别" tabindex="-1">HarmonyOS Next 中的HAP、HAR、HSP区别 <a class="header-anchor" href="#harmonyos-next-中的hap、har、hsp区别" aria-label="Permalink to &quot;HarmonyOS Next 中的HAP、HAR、HSP区别&quot;">​</a></h1><p>想要更加合理的开发一个企业级别的Harmony应用，那么就不得不提其中的<strong>HAP、HAR、HSP</strong>了。</p><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>对于普通的用户来说，可能一个普通的应用就等于一个安装文件<em>如安卓下的APK</em>。但是对于Harmony应用开发工程师来讲，一个应用包含的内容仅仅不止于此。</p><blockquote><p>用户应用程序泛指运行在设备的操作系统之上，为用户提供特定服务的程序，简称“应用”。一个应用所对应的软件包文件，称为“应用程序包”。</p></blockquote><h2 id="项目架构" tabindex="-1">项目架构 <a class="header-anchor" href="#项目架构" aria-label="Permalink to &quot;项目架构&quot;">​</a></h2><p>目前开发应用，稍微大一点的应用，都会采取模块化开发方式。它将应用中的某些功能看做一个单独的模块*(module)<em>。这样的开发方式有利于<strong>团队开发、封装复用、方便维护</strong>等优点。如： <strong>外卖、小象超市、国内外酒店</strong>等可以视作一个单独的模块</em>(module)*。</p><p><img src="'+e+'" alt="image-20240611003828646"></p><p>在Harmony应用中，可以将<strong>模块</strong>看成三个种类。分别是</p><ol><li>HAP --- Harmony Ability Package <strong>鸿蒙能力单元包</strong> - 作者自己翻译的</li><li>HAR --- Harmony Archive <strong>静态共享库</strong></li><li>HSP --- Harmony Shared Package <strong>动态共享库</strong></li></ol><h2 id="hap" tabindex="-1">HAP <a class="header-anchor" href="#hap" aria-label="Permalink to &quot;HAP&quot;">​</a></h2><p>HAP（Harmony Ability Package）是应用安装和运行的基本单元。HAP包是由代码、资源、第三方库、配置文件等打包生成的模块包，其主要分为两种类型：entry和feature。</p><ul><li>entry：应用的主模块，作为应用的入口，提供了应用的基础功能。</li><li>feature：应用的动态特性模块，作为应用能力的扩展，可以根据用户的需求和设备类型进行选择性安装。</li></ul><p><strong>其中，应用程序包可以只包含一个基础的entry包，也可以包含一个基础的entry包和多个功能性的feature包。</strong></p><p><img src="'+o+'" alt="image-20240611005023185"></p><hr><p>在项目工程中，entry模块默认存在，并且存在<strong>入口页面</strong> <strong>@Entry</strong></p><p><img src="'+i+'" alt="image-20240611005153158"></p><p>如果项目只有有个 Entry模块，那么该项目也可称为<strong>单HAP项目结构</strong></p><p>此时，如果我们想要建立多个Feature模块，如</p><p><img src="'+e+'" alt="image-20240611003828646"></p><p>可以直接在项目工程中建立。</p><p><img src="'+s+'" alt="image-20240611005549659"></p><hr><p>Feature模块：</p><p><img src="'+p+'" alt="image-20240611005803048"></p><p>此时 HAP中 Entry 和 Feature模块的关系我们可以使用 美团APP 和 美团外卖APP来简单举例。</p><ul><li>美团APP做为一个超大的APP，里面包含 美团外卖、美团打车等入口。</li><li>美团外卖也可以作为一个单独的APP进行发布上线。</li></ul><p>这也验证了开头 <strong>HAP包可以独立安装和运行，是应用安装的基本单位</strong>的官方描述</p><p><img src="'+h+'" alt="image-20240611010331537"></p><h2 id="har" tabindex="-1">HAR <a class="header-anchor" href="#har" aria-label="Permalink to &quot;HAR&quot;">​</a></h2><p>HAR（Harmony Archive）是静态共享包，可以包含代码、C++库、资源和配置文件。通过HAR可以实现多个模块或多个工程共享ArkUI组件、资源等相关代码。</p><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><ul><li>作为二方库，发布到<a href="https://ohpm.openharmony.cn/" target="_blank" rel="noreferrer">OHPM</a>私仓，供公司内部其他应用使用。</li><li>作为三方库，发布到<a href="https://ohpm.openharmony.cn/" target="_blank" rel="noreferrer">OHPM</a>中心仓，供其他应用使用。</li></ul><h3 id="举个栗子" tabindex="-1">举个栗子 <a class="header-anchor" href="#举个栗子" aria-label="Permalink to &quot;举个栗子&quot;">​</a></h3><p>一个项目中，可能是多个HAP的结构。那么每一个HAP其实都需要用到登录的功能。此时可以将登录功能封装到一个单独的页面或组件中。<strong>Login.ets</strong>，此时考虑方便复用，可以将该功能单独抽离到一个 HAR中方便复用。</p><h3 id="再举个栗子" tabindex="-1">再举个栗子 <a class="header-anchor" href="#再举个栗子" aria-label="Permalink to &quot;再举个栗子&quot;">​</a></h3><p>如阿里集团下，有多个APP都需要登录，那么他们的登录功能可以抽离到一个单独的HAR中，然后作为二方库，<strong>发布到<a href="https://ohpm.openharmony.cn/" target="_blank" rel="noreferrer">OHPM</a>私仓，供公司内部其他应用使用。</strong></p><h3 id="继续举个栗子" tabindex="-1">继续举个栗子 <a class="header-anchor" href="#继续举个栗子" aria-label="Permalink to &quot;继续举个栗子&quot;">​</a></h3><p>如讯飞星火将一个内置了星火AI功能的页面或者组件，<strong>作为三方库，发布到<a href="https://ohpm.openharmony.cn/" target="_blank" rel="noreferrer">OHPM</a>中心仓，供其他应用使用。</strong></p><hr><p>项目中，建立一个HAR模块的示例如下：</p><p><img src="'+d+'" alt="image-20240611010945083"></p><h2 id="hsp" tabindex="-1">HSP <a class="header-anchor" href="#hsp" aria-label="Permalink to &quot;HSP&quot;">​</a></h2><p>HSP（Harmony Shared Package）是动态共享包，可以包含代码、C++库、资源和配置文件，通过HSP可以实现应用内的代码和资源的共享。</p><p>HSP往往是和 HAP做为对比区分了解。</p><ul><li>HSP 是动态共享包</li><li>HAR 是静态共享包</li></ul><p>项目中，如果其他模块引入了 HAR，那么其他模块中都会存在 一份HAR的拷贝，此时会存在资源冗余。而HSP则是通过多个模块共享一个引用，资源空间得到利用。</p><h3 id="举个例子" tabindex="-1">举个例子 <a class="header-anchor" href="#举个例子" aria-label="Permalink to &quot;举个例子&quot;">​</a></h3><p>项目是个多模块结构，多处地方都存在 显示用户头像+用户姓名等需求。此时可以考虑采用 HSP 实现该功能。</p><p><img src="'+g+'" alt="image-20240611011515482"></p><hr><p>工程中，这样来新建一个 HSP模块：</p><p><img src="'+m+'" alt="image-20240611072802185"></p><h2 id="最后附上小结" tabindex="-1">最后附上小结： <a class="header-anchor" href="#最后附上小结" aria-label="Permalink to &quot;最后附上小结：&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">Module类型</th><th style="text-align:left;">包类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">Ability</td><td style="text-align:left;"><a href="https://docs.openharmony.cn/pages/v4.1/zh-cn/application-dev/quick-start/hap-package.md" target="_blank" rel="noreferrer">HAP</a></td><td style="text-align:left;">应用的功能模块，可以独立安装和运行，必须包含一个entry类型的HAP，可选包含一个或多个feature类型的HAP。</td></tr><tr><td style="text-align:left;">Static Library</td><td style="text-align:left;"><a href="https://docs.openharmony.cn/pages/v4.1/zh-cn/application-dev/quick-start/har-package.md" target="_blank" rel="noreferrer">HAR</a></td><td style="text-align:left;">静态共享包，编译态复用。 - 支持应用内共享，也可以发布后供其他应用使用。   - 作为二方库，发布到<a href="https://ohpm.openharmony.cn/" target="_blank" rel="noreferrer">OHPM</a>私仓，供公司内部其他应用使用。   - 作为三方库，发布到<a href="https://ohpm.openharmony.cn/" target="_blank" rel="noreferrer">OHPM</a>中心仓，供其他应用使用。 - 多包（HAP/HSP）引用相同的HAR时，会造成多包间代码和资源的重复拷贝，从而导致应用包膨大。</td></tr><tr><td style="text-align:left;">Shared Library</td><td style="text-align:left;"><a href="https://docs.openharmony.cn/pages/v4.1/zh-cn/application-dev/quick-start/in-app-hsp.md" target="_blank" rel="noreferrer">HSP</a></td><td style="text-align:left;">动态共享包，运行时复用。 - 当前仅支持应用内共享。 - 当多包（HAP/HSP）同时引用同一个共享包时，采用HSP替代HAR，可以避免HAR造成的多包间代码和资源的重复拷贝，从而减小应用包大小。</td></tr></tbody></table><hr><table tabindex="0"><thead><tr><th style="text-align:left;">规格</th><th style="text-align:left;">HAP</th><th style="text-align:left;">HAR</th><th style="text-align:left;">HSP</th></tr></thead><tbody><tr><td style="text-align:left;">支持在配置文件中声明<a href="https://docs.openharmony.cn/pages/v4.1/zh-cn/application-dev/application-models/uiability-overview.md" target="_blank" rel="noreferrer">UIAbility</a>组件与<a href="https://docs.openharmony.cn/pages/v4.1/zh-cn/application-dev/application-models/extensionability-overview.md" target="_blank" rel="noreferrer">ExtensionAbility</a>组件</td><td style="text-align:left;">√</td><td style="text-align:left;">×</td><td style="text-align:left;">×</td></tr><tr><td style="text-align:left;">支持在配置文件中声明<a href="https://docs.openharmony.cn/pages/v4.1/zh-cn/application-dev/quick-start/module-configuration-file.md#pages%E6%A0%87%E7%AD%BE" target="_blank" rel="noreferrer">pages</a>页面</td><td style="text-align:left;">√</td><td style="text-align:left;">×</td><td style="text-align:left;">√</td></tr><tr><td style="text-align:left;">支持包含资源文件与.so文件</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td></tr><tr><td style="text-align:left;">支持依赖其他HAR文件</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td></tr><tr><td style="text-align:left;">支持依赖其他HSP文件</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td><td style="text-align:left;">√</td></tr><tr><td style="text-align:left;">支持在设备上独立安装运行</td><td style="text-align:left;">√</td><td style="text-align:left;">×</td><td style="text-align:left;">×</td></tr></tbody></table><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><p><a href="https://docs.openharmony.cn/pages/v4.1/zh-cn/application-dev/quick-start/application-package-overview.md" target="_blank" rel="noreferrer">应用程序包概述</a></p>',60)]))}const _=a(c,[["render",H]]);export{u as __pageData,_ as default};
