import{_ as d,c as s,a5 as i,o as a}from"./chunks/framework.DoP1wijR.js";const e="/pub-blog/assets/image-20241216073728167.CWOxfCVi.png",g=JSON.parse('{"title":"06-数字类型（1）","description":"","frontmatter":{},"headers":[],"relativePath":"仓颉入门到实战/06-数字类型（1）/06-数字类型（1）.md","filePath":"仓颉入门到实战/06-数字类型（1）/06-数字类型（1）.md","lastUpdated":1739405272000}'),r={name:"仓颉入门到实战/06-数字类型（1）/06-数字类型（1）.md"};function n(l,t,p,h,o,k){return a(),s("div",null,t[0]||(t[0]=[i('<h1 id="_06-数字类型-1" tabindex="-1">06-数字类型（1） <a class="header-anchor" href="#_06-数字类型-1" aria-label="Permalink to &quot;06-数字类型（1）&quot;">​</a></h1><h2 id="什么是数据类型" tabindex="-1">什么是数据类型 <a class="header-anchor" href="#什么是数据类型" aria-label="Permalink to &quot;什么是数据类型&quot;">​</a></h2><p>在编程的世界中，很多情况下我们要操作的目标都是数据。比如仓库管理系统，需要通过数据来登记各种设备信息，航班管理系统，通过</p><p>数据来记录航班的信息。为了方便管理各种各样的数据，我们可以设计出不同的数据类型，方便我们的程序操作。仓颉编程语言中，关于<strong>基础数据类型</strong> 一共分为了 10 种。分别是：</p><table tabindex="0"><thead><tr><th>数据类型</th><th>简单介绍</th></tr></thead><tbody><tr><td>整数类型</td><td>用于表示整数数值。</td></tr><tr><td>浮点类型</td><td>用来表示带有小数部分的数值。</td></tr><tr><td>布尔类型</td><td>存放表示真假的逻辑值。</td></tr><tr><td>字符类型</td><td>表示单个字符。</td></tr><tr><td>字符串类型</td><td>可存储多个字符组成的文本内容。</td></tr><tr><td>元组类型</td><td>将多个不同类型的数据组合起来。</td></tr><tr><td>数组类型</td><td>能存放一组相同类型的数据元素。</td></tr><tr><td>区间类型</td><td>可表示一定范围内的数值区间。</td></tr><tr><td>Unit 类型</td><td>常表示无返回值等特定语义情况。</td></tr><tr><td>Nothing 类型</td><td>代表空或无的概念。</td></tr></tbody></table><h2 id="整数类型" tabindex="-1">整数类型 <a class="header-anchor" href="#整数类型" aria-label="Permalink to &quot;整数类型&quot;">​</a></h2><p>整数类型分为有符号（signed）整数类型和无符号（unsigned 非负数）整数类型。</p><p><strong>有符号整数类型</strong>包括 <code>Int8</code>、<code>Int16</code>、<code>Int32</code>、<code>Int64</code> 和 <code>IntNative</code>，分别用于表示编码长度为 <code>8-bit</code>、<code>16-bit</code>、<code>32-bit</code>、<code>64-bit</code> 和平台相关大小的有符号整数值的类型。</p><p><strong>无符号整数类型</strong>包括 <code>UInt8</code>、<code>UInt16</code>、<code>UInt32</code>、<code>UInt64</code> 和 <code>UIntNative</code>，分别用于表示编码长度为 <code>8-bit</code>、<code>16-bit</code>、<code>32-bit</code>、<code>64-bit</code> 和平台相关大小的无符号整数值的类型。</p><p>对于编码长度为 <code>N</code> 的有符号整数类型，其表示范围为：<code> -2^(N-1) ~ 2^(N-1) - 1</code>；对于编码长度为 <code>N</code> 的无符号整数类型，其表示范围为：<code>0~2^(N-1)</code>。下表列出了所有整数类型的表示范围：</p><p><img src="'+e+`" alt="image-20241216073728167"></p><p>程序具体使用哪种整数类型，取决于该程序中需要处理的整数的性质和范围。在 <code>Int64</code> 类型适合的情况下，首选 <code>Int64</code> 类型，因为</p><p><code>Int64</code> 的表示范围足够大，并且整数类型字面量在没有类型上下文的情况下默认推断为 <code>Int64</code> 类型，可以避免不必要的类型转换。</p><h2 id="整数类型字面量" tabindex="-1">整数类型字面量 <a class="header-anchor" href="#整数类型字面量" aria-label="Permalink to &quot;整数类型字面量&quot;">​</a></h2><p><strong>整数字面量就是一眼能看出来是整数的字面的代码</strong></p><p>如：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>100 整数</span></span>
<span class="line"><span>200 整数</span></span>
<span class="line"><span>xdfds  不是整数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其中，整数类型字面量有 4 种进制表示形式：二进制（使用 <code>0b</code> 或 <code>0B</code> 前缀）、八进制（使用 <code>0o</code> 或 <code>0O</code> 前缀）、十进制（没有前缀）、十六进制（使用 <code>0x</code> 或 <code>0X</code> 前缀）。例如，对于十进制数 <code>24</code>，表示成二进制是 <code>0b00011000</code>（或 <code>0B00011000</code>），表示成八进制是 <code>0o30</code>（或 <code>0O30</code>），表示成十六进制是 <code>0x18</code>（或 <code>0X18</code>）。默认的数字都是十进制。如 <code>100</code> ,一般可以理解为 就是 十进制中的 <code>100</code></p><p>在各进制表示中，可以使用下划线 <code>_</code> 充当分隔符的作用，方便识别数值的位数，如 <code>0b0001_1000</code>。</p><p>对于整数类型字面量，如果它的值超出了上下文要求的整数类型的表示范围，编译器将会报错。</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Int8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error, 128 out of the range of Int8</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UInt8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error, 256 out of the range of UInt8</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Int32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x8000_0000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error, 0x8000_0000 out of the range of Int32</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在使用整数类型字面量时，可以通过加入<strong>后缀</strong>来明确整数字面量的类型，后缀与类型的对应为：</p><table tabindex="0"><thead><tr><th style="text-align:left;">后缀</th><th style="text-align:left;">类型</th><th style="text-align:left;">后缀</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;">i8</td><td style="text-align:left;">Int8</td><td style="text-align:left;">u8</td><td style="text-align:left;">UInt8</td></tr><tr><td style="text-align:left;">i16</td><td style="text-align:left;">Int16</td><td style="text-align:left;">u16</td><td style="text-align:left;">UInt16</td></tr><tr><td style="text-align:left;">i32</td><td style="text-align:left;">Int32</td><td style="text-align:left;">u32</td><td style="text-align:left;">UInt32</td></tr><tr><td style="text-align:left;">i64</td><td style="text-align:left;">Int64</td><td style="text-align:left;">u64</td><td style="text-align:left;">UInt64</td></tr></tbody></table><p>加入了后缀的整数字面量可以像下面的方式来使用：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 100i8  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x is 100 with type Int8</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0x10u64 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// y is 16 with type UInt64</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0o432i32  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// z is 282 with type Int32</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="字符字节字面量" tabindex="-1">字符字节字面量 <a class="header-anchor" href="#字符字节字面量" aria-label="Permalink to &quot;字符字节字面量&quot;">​</a></h2><p>仓颉编程语言支持字符字节字面量，以方便使用 ASCII 码表示 <code>UInt8</code> 类型的值。字符字节字面量由字符 b、一对标识首尾的单引号、以及一个 <code>ASCII</code> 字符组成，例如：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // a is 120 with type UInt8</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // b is 10 with type UInt8</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u{78}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // c is 120 with type UInt8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>b&#39;x&#39;</code> 表示类型为 UInt8 大小是 120 的字面值。另外还可以通过 <code>b&#39;\\u{78}&#39;</code> 这种转义形式表示类型为 <code>UInt8</code>，16 进制大小为 0x78 或 10 进制大小为 120 的字面值。需要注意的是，<code>\\u</code> 内部最多有两位 16 进制数，并且值必须小于 256（十进制）。</p><h3 id="ascii-表" tabindex="-1">ASCII 表 <a class="header-anchor" href="#ascii-表" aria-label="Permalink to &quot;ASCII 表&quot;">​</a></h3><table tabindex="0"><thead><tr><th>十进制</th><th>十六进制</th><th>字符</th></tr></thead><tbody><tr><td>48</td><td>30</td><td>0</td></tr><tr><td>49</td><td>31</td><td>1</td></tr><tr><td>50</td><td>32</td><td>2</td></tr><tr><td>51</td><td>33</td><td>3</td></tr><tr><td>52</td><td>34</td><td>4</td></tr><tr><td>53</td><td>35</td><td>5</td></tr><tr><td>54</td><td>36</td><td>6</td></tr><tr><td>55</td><td>37</td><td>7</td></tr><tr><td>56</td><td>38</td><td>8</td></tr><tr><td>57</td><td>39</td><td>9</td></tr><tr><td>65</td><td>41</td><td>A</td></tr><tr><td>66</td><td>42</td><td>B</td></tr><tr><td>67</td><td>43</td><td>C</td></tr><tr><td>68</td><td>44</td><td>D</td></tr><tr><td>69</td><td>45</td><td>E</td></tr><tr><td>70</td><td>46</td><td>F</td></tr><tr><td>71</td><td>47</td><td>G</td></tr><tr><td>72</td><td>48</td><td>H</td></tr><tr><td>73</td><td>49</td><td>I</td></tr><tr><td>74</td><td>4A</td><td>J</td></tr><tr><td>75</td><td>4B</td><td>K</td></tr><tr><td>76</td><td>4C</td><td>L</td></tr><tr><td>77</td><td>4D</td><td>M</td></tr><tr><td>78</td><td>4E</td><td>N</td></tr><tr><td>79</td><td>4F</td><td>O</td></tr><tr><td>80</td><td>50</td><td>P</td></tr><tr><td>81</td><td>51</td><td>Q</td></tr><tr><td>82</td><td>52</td><td>R</td></tr><tr><td>83</td><td>53</td><td>S</td></tr><tr><td>84</td><td>54</td><td>T</td></tr><tr><td>85</td><td>55</td><td>U</td></tr><tr><td>86</td><td>56</td><td>V</td></tr><tr><td>87</td><td>57</td><td>W</td></tr><tr><td>88</td><td>58</td><td>X</td></tr><tr><td>89</td><td>59</td><td>Y</td></tr><tr><td>90</td><td>5A</td><td>Z</td></tr><tr><td>97</td><td>61</td><td>a</td></tr><tr><td>98</td><td>62</td><td>b</td></tr><tr><td>99</td><td>63</td><td>c</td></tr><tr><td>100</td><td>64</td><td>d</td></tr><tr><td>101</td><td>65</td><td>e</td></tr><tr><td>102</td><td>66</td><td>f</td></tr><tr><td>103</td><td>67</td><td>g</td></tr><tr><td>104</td><td>68</td><td>h</td></tr><tr><td>105</td><td>69</td><td>i</td></tr><tr><td>106</td><td>6A</td><td>j</td></tr><tr><td>107</td><td>6B</td><td>k</td></tr><tr><td>108</td><td>6C</td><td>l</td></tr><tr><td>109</td><td>6D</td><td>m</td></tr><tr><td>110</td><td>6E</td><td>n</td></tr><tr><td>111</td><td>6F</td><td>o</td></tr><tr><td>112</td><td>70</td><td>p</td></tr><tr><td>113</td><td>71</td><td>q</td></tr><tr><td>114</td><td>72</td><td>r</td></tr><tr><td>115</td><td>73</td><td>s</td></tr><tr><td>116</td><td>74</td><td>t</td></tr><tr><td>117</td><td>75</td><td>u</td></tr><tr><td>118</td><td>76</td><td>v</td></tr><tr><td>119</td><td>77</td><td>w</td></tr><tr><td>120</td><td>78</td><td>x</td></tr><tr><td>121</td><td>79</td><td>y</td></tr><tr><td>122</td><td>7A</td><td>z</td></tr><tr><td>33</td><td>21</td><td>!</td></tr><tr><td>34</td><td>22</td><td>&quot;</td></tr><tr><td>35</td><td>23</td><td>#</td></tr><tr><td>36</td><td>24</td><td>$</td></tr><tr><td>37</td><td>25</td><td>%</td></tr><tr><td>38</td><td>26</td><td>&amp;</td></tr><tr><td>39</td><td>27</td><td>&#39;</td></tr><tr><td>40</td><td>28</td><td>(</td></tr><tr><td>41</td><td>29</td><td>)</td></tr><tr><td>42</td><td>2A</td><td>*</td></tr><tr><td>43</td><td>2B</td><td>+</td></tr><tr><td>44</td><td>2C</td><td>,</td></tr><tr><td>45</td><td>2D</td><td>-</td></tr><tr><td>46</td><td>2E</td><td>.</td></tr><tr><td>47</td><td>2F</td><td>/</td></tr><tr><td>58</td><td>3A</td><td>:</td></tr><tr><td>59</td><td>3B</td><td>;</td></tr><tr><td>60</td><td>3C</td><td>&lt;</td></tr><tr><td>61</td><td>3D</td><td>=</td></tr><tr><td>62</td><td>3E</td><td>&gt;</td></tr><tr><td>63</td><td>3F</td><td>?</td></tr><tr><td>64</td><td>40</td><td>@</td></tr><tr><td>91</td><td>5B</td><td>[</td></tr><tr><td>92</td><td>5C</td><td>|</td></tr><tr><td>93</td><td>5D</td><td>]</td></tr><tr><td>94</td><td>5E</td><td>^</td></tr><tr><td>95</td><td>5F</td><td>_</td></tr><tr><td>96</td><td>60</td><td>\`</td></tr><tr><td>123</td><td>7B</td><td>{</td></tr><tr><td>124</td><td>7C</td><td></td></tr><tr><td>125</td><td>7D</td><td>}</td></tr><tr><td>126</td><td>7E</td><td>~</td></tr></tbody></table>`,31)]))}const y=d(r,[["render",n]]);export{g as __pageData,y as default};
