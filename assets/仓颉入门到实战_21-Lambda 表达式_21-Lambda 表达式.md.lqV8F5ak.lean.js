import{_ as s,c as n,a5 as e,o as p}from"./chunks/framework.DoP1wijR.js";const h=JSON.parse('{"title":"21-Lambda 表达式","description":"","frontmatter":{},"headers":[],"relativePath":"仓颉入门到实战/21-Lambda 表达式/21-Lambda 表达式.md","filePath":"仓颉入门到实战/21-Lambda 表达式/21-Lambda 表达式.md","lastUpdated":1736065935000}'),l={name:"仓颉入门到实战/21-Lambda 表达式/21-Lambda 表达式.md"};function i(t,a,r,d,c,b){return p(),n("div",null,a[0]||(a[0]=[e(`<h1 id="_21-lambda-表达式" tabindex="-1">21-Lambda 表达式 <a class="header-anchor" href="#_21-lambda-表达式" aria-label="Permalink to &quot;21-Lambda 表达式&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>Lambda表达式可以看成是一种函数的简写，对于函数而言，有函数声明、函数调用。所以我们在学习 Lambda表达式的时候也可以从这</p><p>个作为入手来学习，其中，Lambda表达式特别灵活，在学习的时候尤为注意。</p><h2 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-label="Permalink to &quot;基本语法&quot;">​</a></h2><p>Lambda 表达式的语法为如下形式： <code>{ p1: T1, ..., pn: Tn =&gt; expressions | declarations }</code></p><ol><li>Lambda 表达式 的外层通过 <code>{}</code> 来表示</li><li><code>=&gt;</code> 左侧为参数部分</li><li><code>=&gt;</code> 右侧为返回值或者逻辑代码部分</li></ol><h2 id="简单声明" tabindex="-1">简单声明 <a class="header-anchor" href="#简单声明" aria-label="Permalink to &quot;简单声明&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    // 声明  f1 的形参是a，a的类型是Int64 , 返回值 是 a+100</span></span>
<span class="line"><span>    let f1 = {a: Int64 =&gt; a + 100}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="简单调用" tabindex="-1">简单调用 <a class="header-anchor" href="#简单调用" aria-label="Permalink to &quot;简单调用&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>	println(f1(200)) // 将f1 当成函数来调用</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="省略参数类型" tabindex="-1">省略参数类型 <a class="header-anchor" href="#省略参数类型" aria-label="Permalink to &quot;省略参数类型&quot;">​</a></h2><p>Lambda 表达式 在声明了类型的同时，可以省略形参的类型</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    // 没有省略</span></span>
<span class="line"><span>    let f1: (a: Int64) -&gt; Int64 = {a: Int64 =&gt; a}</span></span>
<span class="line"><span>    // 省略</span></span>
<span class="line"><span>    let f2: (a: Int64) -&gt; Int64 = {a =&gt; a}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="没有形参" tabindex="-1">没有形参 <a class="header-anchor" href="#没有形参" aria-label="Permalink to &quot;没有形参&quot;">​</a></h2><p>Lambda 表达式 在没有形参时，写法如下</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    // 有参数</span></span>
<span class="line"><span>    let f3 = {a: Int64 =&gt; a + 100}</span></span>
<span class="line"><span>    // 没有参数</span></span>
<span class="line"><span>    let f4 = {=&gt; 100}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="没有返回值" tabindex="-1">没有返回值 <a class="header-anchor" href="#没有返回值" aria-label="Permalink to &quot;没有返回值&quot;">​</a></h2><p>Lambda 表达式 在没有返回值时，写法如下</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    // 没有返回值  也没有形参</span></span>
<span class="line"><span>    let f5 = { =&gt; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="立即调用" tabindex="-1">立即调用 <a class="header-anchor" href="#立即调用" aria-label="Permalink to &quot;立即调用&quot;">​</a></h2><p>Lambda 表达式支持立即调用，例如：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    let f6 = {a: Int64, b: Int64 =&gt; a + b}(1, 2)</span></span>
<span class="line"><span>    println(f6) // 3</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    let f7 = {=&gt; 123}()</span></span>
<span class="line"><span>    println(f7) // 123</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="当成变量进行传递和调用" tabindex="-1">当成变量进行传递和调用 <a class="header-anchor" href="#当成变量进行传递和调用" aria-label="Permalink to &quot;当成变量进行传递和调用&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    func f() {</span></span>
<span class="line"><span>        var g = { x: Int64 =&gt; println(&quot;x = \${x}&quot;) }</span></span>
<span class="line"><span>        g(2)</span></span>
<span class="line"><span>    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,25)]))}const u=s(l,[["render",i]]);export{h as __pageData,u as default};
