import{_ as s,c as n,a5 as e,o as p}from"./chunks/framework.DoP1wijR.js";const h=JSON.parse('{"title":"13-数组类型（1）","description":"","frontmatter":{},"headers":[],"relativePath":"仓颉入门到实战/13-数组类型（1）/13-数组类型（1）.md","filePath":"仓颉入门到实战/13-数组类型（1）/13-数组类型（1）.md","lastUpdated":1735170666000}'),r={name:"仓颉入门到实战/13-数组类型（1）/13-数组类型（1）.md"};function l(i,a,t,c,d,o){return p(),n("div",null,a[0]||(a[0]=[e(`<h1 id="_13-数组类型-1" tabindex="-1">13-数组类型（1） <a class="header-anchor" href="#_13-数组类型-1" aria-label="Permalink to &quot;13-数组类型（1）&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>数组类型使用Array来表示</p><p>我们可以使用 Array 类型来构造单一元素类型，有序序列的数据。比如可以定义 字符串数组、数字数组、布尔数组。</p><p>使用数组会更加方便我们管理一组相似的数据</p><p><strong>Array 是一种长度不变的 Collection 类型， Array 没有提供添加和删除元素的成员函数</strong></p><h2 id="数组创建方式一-字面量方式" tabindex="-1">数组创建方式一 字面量方式 <a class="header-anchor" href="#数组创建方式一-字面量方式" aria-label="Permalink to &quot;数组创建方式一 字面量方式&quot;">​</a></h2><p>该方式写法最简洁，比较常用</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    //  方式一 字面量方式</span></span>
<span class="line"><span>    let arr1 = [1, 2, 3, 4] // 数字数组</span></span>
<span class="line"><span>    let arr2 = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;] // 字符串数组</span></span>
<span class="line"><span>    // let arr3=[&#39;a&#39;,100]// 不能存放不同类型的数据</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="数组创建方式二-指定类型" tabindex="-1">数组创建方式二 指定类型 <a class="header-anchor" href="#数组创建方式二-指定类型" aria-label="Permalink to &quot;数组创建方式二 指定类型&quot;">​</a></h2><p>创建数组的时候还可以主动的指定类型</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    // 方式二 指定类型</span></span>
<span class="line"><span>    let arr3: Array&lt;Int64&gt; = [1, 2, 3]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="数组创建方式三-指定长度和内容" tabindex="-1">数组创建方式三 指定长度和内容 <a class="header-anchor" href="#数组创建方式三-指定长度和内容" aria-label="Permalink to &quot;数组创建方式三 指定长度和内容&quot;">​</a></h2><p>这个方式比较适合我们创建指定长度和内容的数组</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    // 方式三 指定长度</span></span>
<span class="line"><span>    let arr4 = Array&lt;Int64&gt;() // 空数组</span></span>
<span class="line"><span>    let arr5 = Array&lt;Int64&gt;(5, {i =&gt; 100}) // 创建了5个100， i表示数组的每一个位置 从0开始，这里用不到，只是防止语法出错</span></span>
<span class="line"><span>    let arr6 = Array&lt;Int64&gt;(5, {i =&gt; i + 1}) // 5个元素，分别是 1、2、3、4、5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="访问数组" tabindex="-1">访问数组 <a class="header-anchor" href="#访问数组" aria-label="Permalink to &quot;访问数组&quot;">​</a></h2><p>我们可以访问数组的长度和数组中的每一个元素</p><h3 id="访问长度" tabindex="-1">访问长度 <a class="header-anchor" href="#访问长度" aria-label="Permalink to &quot;访问长度&quot;">​</a></h3><p>size 是每一个数组都会拥有的属性，表示数组内元素的个数</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    let arr7 = [1, 2, 3, 4]</span></span>
<span class="line"><span>    print(arr7.size) // 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="访问单个元素" tabindex="-1">访问单个元素 <a class="header-anchor" href="#访问单个元素" aria-label="Permalink to &quot;访问单个元素&quot;">​</a></h3><p>我们想要访问元素是通过元素在数组中的位置来访问的。需要注意的是，开始的序号是从0开始。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    // 访问元素</span></span>
<span class="line"><span>    let arr7 = [1, 2, 3, 4]</span></span>
<span class="line"><span>    print(arr7[0]) // 1 </span></span>
<span class="line"><span>    print(arr7[3]) // 4 </span></span>
<span class="line"><span>    print(arr7[20]) // 超出范围 便会报错 &quot;array index 20 is past the end of array (which contains 4 elements)&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="访问一段范围内的元素" tabindex="-1">访问一段范围内的元素 <a class="header-anchor" href="#访问一段范围内的元素" aria-label="Permalink to &quot;访问一段范围内的元素&quot;">​</a></h3><p>我们可以通过特定语法，快速活动原数组中的一段范围内的元素</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    // 获取数组内的一段范围</span></span>
<span class="line"><span>    let arr8 = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</span></span>
<span class="line"><span>    // let arr9 = arr8[0..3] // a b c  不包含 顺序为 3的元素</span></span>
<span class="line"><span>    let arr10 = arr8[..3] // a b c </span></span>
<span class="line"><span>    let arr11 = arr8[3..] // d e</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="修改数组" tabindex="-1">修改数组 <a class="header-anchor" href="#修改数组" aria-label="Permalink to &quot;修改数组&quot;">​</a></h2><p>这里的修改指的是修改数组的元素</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    // 修改元素</span></span>
<span class="line"><span>    let arr8 = [1, 2, 3, 4]</span></span>
<span class="line"><span>    arr8[1] = 100</span></span>
<span class="line"><span>    print(arr8[1]) // 100</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,29)]))}const u=s(r,[["render",l]]);export{h as __pageData,u as default};
